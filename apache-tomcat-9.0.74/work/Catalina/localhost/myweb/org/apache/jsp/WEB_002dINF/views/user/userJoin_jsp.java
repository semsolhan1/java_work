/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.74
 * Generated at: 2023-05-29 08:05:33 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.user;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class userJoin_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>Insert title here</title>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\n");
      out.write("	<section>\n");
      out.write("		<div class=\"container\">\n");
      out.write("			<div class=\"row\">\n");
      out.write("				<div class=\"col-lg-6 col-md-9 col-sm-12 join-form\">\n");
      out.write("					<div class=\"titlebox\">회원가입</div>\n");
      out.write("					<form action=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/user/userJoin\"\n");
      out.write("						method=\"post\" name=\"joinForm\">\n");
      out.write("						<div class=\"form-group\">\n");
      out.write("							<!--사용자클래스선언-->\n");
      out.write("							<label for=\"id\">아이디</label>\n");
      out.write("							<div class=\"input-group\">\n");
      out.write("								<!--input2탭의 input-addon을 가져온다 -->\n");
      out.write("								<input type=\"text\" name=\"userId\" class=\"form-control\"\n");
      out.write("									id=\"userId\" placeholder=\"아이디를 (영문포함 4~12자 이상)\">\n");
      out.write("								<div class=\"input-group-addon\">\n");
      out.write("									<button type=\"button\" class=\"btn btn-primary\" id=\"idCheckBtn\">아이디중복체크</button>\n");
      out.write("								</div>\n");
      out.write("							</div>\n");
      out.write("							<span id=\"msgId\"></span>\n");
      out.write("							<!--자바스크립트에서 추가-->\n");
      out.write("						</div>\n");
      out.write("						<div class=\"form-group\">\n");
      out.write("							<!--기본 폼그룹을 가져온다-->\n");
      out.write("							<label for=\"password\">비밀번호</label> <input type=\"password\"\n");
      out.write("								name=\"userPw\" class=\"form-control\" id=\"userPw\"\n");
      out.write("								placeholder=\"비밀번호 (영 대/소문자, 숫자 조합 8~16자 이상)\"> <span\n");
      out.write("								id=\"msgPw\"></span>\n");
      out.write("							<!--자바스크립트에서 추가-->\n");
      out.write("						</div>\n");
      out.write("						<div class=\"form-group\">\n");
      out.write("							<label for=\"password-confrim\">비밀번호 확인</label> <input\n");
      out.write("								type=\"password\" class=\"form-control\" id=\"pwConfirm\"\n");
      out.write("								placeholder=\"비밀번호를 확인해주세요.\"> <span id=\"msgPw-c\"></span>\n");
      out.write("							<!--자바스크립트에서 추가-->\n");
      out.write("						</div>\n");
      out.write("						<div class=\"form-group\">\n");
      out.write("							<label for=\"name\">이름</label> <input type=\"text\" name=\"userName\"\n");
      out.write("								class=\"form-control\" id=\"userName\" placeholder=\"이름을 입력하세요.\">\n");
      out.write("						</div>\n");
      out.write("						<!--input2탭의 input-addon을 가져온다 -->\n");
      out.write("						<div class=\"form-group\">\n");
      out.write("							<label for=\"hp\">휴대폰번호</label>\n");
      out.write("							<div class=\"input-group\">\n");
      out.write("								<select name=\"userPhone1\" class=\"form-control phone1\"\n");
      out.write("									id=\"userPhone1\">\n");
      out.write("									<option>010</option>\n");
      out.write("									<option>011</option>\n");
      out.write("									<option>017</option>\n");
      out.write("									<option>018</option>\n");
      out.write("								</select> <input type=\"text\" name=\"userPhone2\"\n");
      out.write("									class=\"form-control phone2\" id=\"userPhone2\"\n");
      out.write("									placeholder=\"휴대폰번호를 입력하세요.\">\n");
      out.write("							</div>\n");
      out.write("						</div>\n");
      out.write("						<div class=\"form-group email-form\">\n");
      out.write("							<label for=\"email\">이메일</label><br>\n");
      out.write("							<div class=\"input-group\">\n");
      out.write("								<input type=\"text\" name=\"userEmail1\" class=\"form-control\"\n");
      out.write("									id=\"userEmail1\" placeholder=\"이메일\"> <select\n");
      out.write("									name=\"userEmail2\" class=\"form-control\" id=\"userEmail2\">\n");
      out.write("									<option>@naver.com</option>\n");
      out.write("									<option>@daum.net</option>\n");
      out.write("									<option>@gmail.com</option>\n");
      out.write("									<option>@hanmail.com</option>\n");
      out.write("									<option>@yahoo.co.kr</option>\n");
      out.write("								</select>\n");
      out.write("								<div class=\"input-group-addon\">\n");
      out.write("									<button type=\"button\" id=\"mail-check-btn\"\n");
      out.write("										class=\"btn btn-primary\">이메일 인증</button>\n");
      out.write("								</div>\n");
      out.write("							</div>\n");
      out.write("						</div>\n");
      out.write("						<div class=\"mail-check-box\">\n");
      out.write("							<input type=\"text\" class=\"form-control mail-check-input\"\n");
      out.write("								placeholder=\"인증번호 6자리를 입력하세요.\" maxlength=\"6\" disabled=\"disabled\">\n");
      out.write("							<span id=\"mail-check-warn\"></span>\n");
      out.write("						</div>\n");
      out.write("\n");
      out.write("\n");
      out.write("						<!--readonly 속성 추가시 자동으로 블락-->\n");
      out.write("						<div class=\"form-group\">\n");
      out.write("							<label for=\"addr-num\">주소</label>\n");
      out.write("							<div class=\"input-group\">\n");
      out.write("								<input type=\"text\" name=\"addrZipNum\" class=\"form-control\"\n");
      out.write("									id=\"addrZipNum\" placeholder=\"우편번호\" readonly>\n");
      out.write("								<div class=\"input-group-addon\">\n");
      out.write("									<button type=\"button\" class=\"btn btn-primary\"\n");
      out.write("										onclick=\"searchAddress()\">주소찾기</button>\n");
      out.write("								</div>\n");
      out.write("							</div>\n");
      out.write("						</div>\n");
      out.write("						<div class=\"form-group\">\n");
      out.write("							<input type=\"text\" name=\"addrBasic\" class=\"form-control\"\n");
      out.write("								id=\"addrBasic\" placeholder=\"기본주소\">\n");
      out.write("						</div>\n");
      out.write("						<div class=\"form-group\">\n");
      out.write("							<input type=\"text\" name=\"addrDetail\" class=\"form-control\"\n");
      out.write("								id=\"addrDetail\" placeholder=\"상세주소\">\n");
      out.write("						</div>\n");
      out.write("\n");
      out.write("						<!--button탭에 들어가서 버튼종류를 확인한다-->\n");
      out.write("						<div class=\"form-group\">\n");
      out.write("							<button type=\"button\" id=\"joinBtn\"\n");
      out.write("								class=\"btn btn-lg btn-success btn-block\">회원가입</button>\n");
      out.write("						</div>\n");
      out.write("\n");
      out.write("						<div class=\"form-group\">\n");
      out.write("							<button type=\"button\" id=\"loginBtn\"\n");
      out.write("								class=\"btn btn-lg btn-info btn-block\">로그인</button>\n");
      out.write("						</div>\n");
      out.write("					</form>\n");
      out.write("				</div>\n");
      out.write("			</div>\n");
      out.write("		</div>\n");
      out.write("	</section>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("	<script\n");
      out.write("		src=\"//t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js\">\n");
      out.write("	</script>\n");
      out.write("	\n");
      out.write("	\n");
      out.write("	\n");
      out.write("	<script>\n");
      out.write("		let code = ''; //이메일 전송 인증번호 저장을 위한 변수\n");
      out.write("\n");
      out.write("		let idFlag, pwFlag; //이건왜? 정규표현식 유효성 검사\n");
      out.write("				\n");
      out.write("				\n");
      out.write("		document.getElementById('idCheckBtn').onclick = function(){\n");
      out.write("			\n");
      out.write("			const userId = document.getElementById('userId').value;\n");
      out.write("			\n");
      out.write("			if(userId === ''){\n");
      out.write("				alert('아이디는 필수 값 입니다.')\n");
      out.write("				return; \n");
      out.write("			} if(!idFlag){\n");
      out.write("				alert('똑바로 적어주세요');\n");
      out.write("				return;\n");
      out.write("			}\n");
      out.write("			\n");
      out.write("			\n");
      out.write("			\n");
      out.write("			\n");
      out.write("			const reqObj = {\n");
      out.write("					method: 'post',\n");
      out.write("					headers: {\n");
      out.write("						'Content-Type' : 'text/plain'\n");
      out.write("					},\n");
      out.write("					body: userId\n");
      out.write("			};\n");
      out.write("				\n");
      out.write("			\n");
      out.write("			//비동기 요청 보내기\n");
      out.write("			fetch('");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/user/idCheck', reqObj)\n");
      out.write("			\n");
      out.write("			.then(res => res.text()) \n");
      out.write("			.then(data => { \n");
      out.write("\n");
      out.write("				//(아이디 중복 여부)\n");
      out.write("				if(data === 'ok'){\n");
      out.write("					//더이상 아이디 작성 X\n");
      out.write("					document.getElementById('userId').setAttribute('readonly', true);\n");
      out.write("					//더이상 누르기 금지\n");
      out.write("					document.getElementById('idCheckBtn').setAttribute('disabled', true);\n");
      out.write("					//그리고 메세지 남기기\n");
      out.write("					document.getElementById('msgId').textContent = '사용 가능한 아이디 입니다.';\n");
      out.write("				} else { //아이디 중복이면?\n");
      out.write("					document.getElementById('msgId').textContent = '중복 된 아이디 입니다.';\n");
      out.write("				}\n");
      out.write("			}); \n");
      out.write("		\n");
      out.write("	} //아이디 중복 끝\n");
      out.write("				\n");
      out.write("				\n");
      out.write("	//인증 번호를 이메일로 전송시켜보자\n");
      out.write("	document.getElementById('mail-check-btn').onclick = function(){\n");
      out.write("		const email = document.getElementById('userEmail1').value + document.getElementById('userEmail2').value;  \n");
      out.write("	\n");
      out.write("		fetch('");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/user/mailCheck?email=' + email) //겟방식\n");
      out.write("		.then(res => res.text()) \n");
      out.write("			.then(data => { \n");
      out.write("				console.log('인증번호: ' + data);\n");
      out.write("				\n");
      out.write("			\n");
      out.write("			//비활성된 인증번호의 입력창을 활성화\n");
      out.write("			document.querySelector('.mail-check-input').disabled = false;\n");
      out.write("			code = data; \n");
      out.write("			alert('인증번호가 전송 되었습니다. 확인 후 입력란에 정확히 입력하세요');\n");
      out.write("			\n");
      out.write("			}); //비동기 끝.\n");
      out.write("			\n");
      out.write("	}; //인증번호 이벤트 끝.			\n");
      out.write("				\n");
      out.write("				\n");
      out.write("				\n");
      out.write("	//인증번호 검증\n");
      out.write("	document.querySelector('.mail-check-input').onblur = function(e){\n");
      out.write("		console.log('blur 이벤트 발생 확인!');\n");
      out.write("		\n");
      out.write("		//사용자가 입력한 인증 번호 가져오기.\n");
      out.write("		const inputCode = e.target.value;\n");
      out.write("		\n");
      out.write("		//위로가보면 span태그가 있다. 결과 메시지 남겨 줄 것이다.\n");
      out.write("		const $resultMsg = document.getElementById('mail-check-warn');\n");
      out.write("		\n");
      out.write("		if(inputCode === code){\n");
      out.write("			$resultMsg.textContent = '인증번호가 일치합니다.';\n");
      out.write("			$resultMsg.style.color = 'green';\n");
      out.write("			//이메일 인증을 더 이상 못하게 버튼 비활성\n");
      out.write("			document.getElementById('mail-check-btn').disabled = true;\n");
      out.write("			document.getElementById('userEmail1').setAttribute('readonly', true);\n");
      out.write("			document.getElementById('userEmail2').setAttribute('readonly', true);\n");
      out.write("			e.target.style.display = 'none'; //인증번호 입력창 숨기기\n");
      out.write("			\n");
      out.write("			const email2 = document.getElementById('userEmail2'); //요소취득\n");
      out.write("			email2.setAttribute('onFocus', 'this.initialSelect = this.selectedIndex'); //속성걸기\n");
      out.write("			\n");
      out.write("			//즉, 이벤트를 인라인방식으로 먹였는데. 사용자가 선택한 그 인덱스 값을 초기화 값으로 세팅 해주겟다 라는 뜻이다.\n");
      out.write("			email2.setAttribute('onChange', 'this.selectedIndex = this.initialSelect');\n");
      out.write("			\n");
      out.write("			\n");
      out.write("			\n");
      out.write("			\n");
      out.write("		} else {   //사용자가 인증번호가 틀렸다면\n");
      out.write("			$resultMsg.textContent = '인증번호를 다시 확인해 주세요.';\n");
      out.write("			$resultMsg.style.color = 'red';\n");
      out.write("			e.target.focus(); \n");
      out.write("		}\n");
      out.write("		\n");
      out.write("	} //인증 번호 끝\n");
      out.write("	\n");
      out.write("	\n");
      out.write("	\n");
      out.write("	\n");
      out.write("	\n");
      out.write("	\n");
      out.write("	\n");
      out.write("	\n");
      out.write("	// 주소 API\n");
      out.write("	function searchAddress() { \n");
      out.write("        new daum.Postcode({\n");
      out.write("            oncomplete: function(data) {\n");
      out.write("\n");
      out.write("                var addr = ''; // 주소 변수\n");
      out.write("                var extraAddr = ''; // 참고항목 변수\n");
      out.write("\n");
      out.write("                //사용자가 선택한 주소 타입에 따라 해당 주소 값 가져옴\n");
      out.write("                if (data.userSelectedType === 'R') { // 사용자가 도로명 주소를 선택했을 경우\n");
      out.write("                    addr = data.roadAddress;\n");
      out.write("                } else { // 사용자가 지번 주소를 선택했을 경우(J)\n");
      out.write("                    addr = data.jibunAddress;\n");
      out.write("                }		\n");
      out.write("				\n");
      out.write("				\n");
      out.write("             // 우편번호와 주소 정보를 해당 필드에 넣는다.\n");
      out.write("                document.getElementById('addrZipNum').value = data.zonecode; //우편번호\n");
      out.write("                document.getElementById(\"addrBasic\").value = addr; 	//기본주소\n");
      out.write("                document.getElementById(\"addrDetail\").focus();\n");
      out.write("            }\n");
      out.write("        }).open();\n");
      out.write("    } //주소찾기 api 끝.\n");
      out.write("				\n");
      out.write("				\n");
      out.write("				\n");
      out.write("  //폼 데이터 검증 (회원 가입 버튼을 눌렀을 때)\n");
      out.write("	document.getElementById('joinBtn').onclick = function(){\n");
      out.write("    	\n");
      out.write("    	if(idFlag && pwFlag){ //둘중 하나라도 false니? 정규표현식을 통과했으면 각각 true가 오겠지. 이걸 통과 해야 중복체크 등등을 검사한다. 하나라도 통과하지 못한다면 else로빠짐.\n");
      out.write("    		//입력값 검증\n");
      out.write("        	if(!document.getElementById('userId').getAttribute('readonly')){ //리드온리(중복체크안했다라는소리)가 걸려있지 않니?\n");
      out.write("        		alert('아이디 중복 체크는 필수 입니다.');\n");
      out.write("        		return; //종료\n");
      out.write("        	}\n");
      out.write("    	\n");
      out.write("        	if(document.getElementById('userPw').value !== document.getElementById('pwConfirm').value){ //혹시 입력한 비밀번호 값과 비밀번호 확인란과 값이 다르니? \n");
      out.write("        		alert('비밀번호 확인란을 확인하세요!')\n");
      out.write("        		return\n");
      out.write("        	}\n");
      out.write("        	\n");
      out.write("        	if(document.getElementById('userName').value === ''){\n");
      out.write("        		alert('이름은 필수값입니다.');\n");
      out.write("        		return;\n");
      out.write("        	}\n");
      out.write("\n");
      out.write("        	if(!document.getElementById('mail-check-btn').disabled){ //이메일 인증을 안한사람이구나\n");
      out.write("        		alert('이메일 인증을 완료해 주세요.');\n");
      out.write("        		return;\n");
      out.write("        	}\n");
      out.write("        	\n");
      out.write("			if(confirm('회원 가입을 진행합니다.')){\n");
      out.write("				document.joinForm.submit();\n");
      out.write("			} else { //취소버튼누르면\n");
      out.write("				return;\n");
      out.write("			}\n");
      out.write("        	\n");
      out.write("    	} else { //정규표현식 통과 못함\n");
      out.write("    		alert('입력값을 다시 한 번 확인하세요!');\n");
      out.write("    	}\n");
      out.write("    	\n");
      out.write("    	\n");
      out.write("    	\n");
      out.write("    }\n");
      out.write("	\n");
      out.write("    \n");
      out.write("    \n");
      out.write("    \n");
      out.write("    \n");
      out.write("    \n");
      out.write("\n");
      out.write("\n");
      out.write("	/*아이디 형식 검사 스크립트*/\n");
      out.write("	var id = document.getElementById(\"userId\");\n");
      out.write("	id.onkeyup = function() { \n");
      out.write("		/*test메서드를 통해 비교하며, 매칭되면 true, 아니면 false반*/\n");
      out.write("		var regex = /^[A-Za-z0-9+]{4,12}$/; /*정규표현식의 시작과 끝.  $이 끝이다. []안에 있는 것이 찾고자 하는 문자의 규칙이다. 그 문자는 4자이상 12자 이하 로 설정한다. 구글에 자바스크립트 id 정규표현식 이런식으로 쳐서 가져다가 쓰면 됨*/\n");
      out.write("		if (regex.test(document.getElementById(\"userId\").value)) { /*검증하고자하는 값을 넣어주면 됨. 맞으면 트루겠지*/\n");
      out.write("			document.getElementById(\"userId\").style.borderColor = \"green\";\n");
      out.write("			document.getElementById(\"msgId\").innerHTML = \"아이디중복체크는 필수 입니다\";\n");
      out.write("\n");
      out.write("			idFlag = true;\n");
      out.write("			\n");
      out.write("			\n");
      out.write("		} else {\n");
      out.write("			document.getElementById(\"userId\").style.borderColor = \"red\";\n");
      out.write("			document.getElementById(\"msgId\").innerHTML = \"부적합한 아이디 입니다.\";\n");
      out.write("		\n");
      out.write("			idFlag = false;\n");
      out.write("		}\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	\n");
      out.write("	/*비밀번호 형식 검사 스크립트*/\n");
      out.write("	var pw = document.getElementById(\"userPw\");\n");
      out.write("	pw.onkeyup = function() {\n");
      out.write("		var regex = /^[A-Za-z0-9+]{8,16}$/;\n");
      out.write("		if (regex.test(document.getElementById(\"userPw\").value)) {\n");
      out.write("			document.getElementById(\"userPw\").style.borderColor = \"green\";\n");
      out.write("			document.getElementById(\"msgPw\").innerHTML = \"사용가능합니다\";\n");
      out.write("	\n");
      out.write("			pwFlag = true;\n");
      out.write("		\n");
      out.write("		} else {\n");
      out.write("			document.getElementById(\"userPw\").style.borderColor = \"red\";\n");
      out.write("			document.getElementById(\"msgPw\").innerHTML = \"불가능합니다.\";\n");
      out.write("		\n");
      out.write("			pwFlag = false;\n");
      out.write("		}\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	\n");
      out.write("	/*비밀번호 확인검사*/\n");
      out.write("	var pwConfirm = document.getElementById(\"pwConfirm\");\n");
      out.write("	pwConfirm.onkeyup = function() {\n");
      out.write("		var regex = /^[A-Za-z0-9+]{8,16}$/;\n");
      out.write("		if (document.getElementById(\"pwConfirm\").value == document\n");
      out.write("				.getElementById(\"userPw\").value) {\n");
      out.write("			document.getElementById(\"pwConfirm\").style.borderColor = \"green\";\n");
      out.write("			document.getElementById(\"msgPw-c\").innerHTML = \"비밀번호가 일치합니다\";\n");
      out.write("		} else {\n");
      out.write("			document.getElementById(\"pwConfirm\").style.borderColor = \"red\";\n");
      out.write("			document.getElementById(\"msgPw-c\").innerHTML = \"비밀번호 확인란을 확인하세요\";\n");
      out.write("		}\n");
      out.write("	}			\n");
      out.write("				\n");
      out.write("	</script>\n");
      out.write("\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
